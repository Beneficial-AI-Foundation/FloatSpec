#!/usr/bin/env bash
set -euo pipefail

# Use GNU timeout if available; on macOS prefer gtimeout (coreutils)
TIMEOUT_BIN="${TIMEOUT_BIN:-timeout}"
command -v "$TIMEOUT_BIN" >/dev/null 2>&1 || TIMEOUT_BIN="gtimeout"
if ! command -v "$TIMEOUT_BIN" >/dev/null 2>&1; then
  echo "warning: timeout/gtimeout not found; running without a time limit" >&2
  TIMEOUT_BIN=""
fi

file_list=(
    # Defs.lean
    # Zaux.lean
    # Raux.lean
    # Digits.lean
    # Float_prop.lean
    # Round_pred.lean
    Generic_fmt.lean
    Round_generic.lean
    # Round_NE.lean
    # FIX.lean
    # FLT.lean
    # FLX.lean
    # FTZ.lean
    Ulp.lean
)

round_num=10


# Build the multi-line prompt literally, no expansions.
# NOTE: The line with EOF must be at column 1 with no trailing spaces/tabs.
# The '|| true' prevents 'set -e' from exiting because read -d '' returns 1 at EOF.
for ((i=1; i<=round_num; i++)); do
# for file in "${file_list[@]}"; do
IFS= read -r -d '' msg <<'EOF' || true
Please ensure your implementation Always Works™ for:

## Task: Introduce Missing Theorems in FloatSpec/src/Core

## Scope


Introduce missing theorems in the file. You can find the record of missing theorems in file /home/hantao/code/FloatSpec/FloatSpec/src/Core/Core_Theorems_Comparison_Auto.md, which is generated by comparing the Coq and Lean versions of the file. For all the missing theorems in the file, find their corresponding Coq implementation in /home/hantao/code/flocq/src/Core and implement them in Lean, using the same name and similar syntax with existing theorems. Leave the proofs empty for now.

### Prerequisites

1. **Read documentation first:**
    - FloatSpec/PIPELINE.md - understand the overall pipeline
    - ./CLAUDE.md - focus on proof writing instructions and mvcgen info
    - /home/hantao/code/FloatSpec/FloatSpec/src/Core/Core_Theorems_Comparison_New.md - produce the list of theorems with `no match` or `not-found` tag, and be ready to implement them one by one

### Core Requirements

### Theorem Importing Process

1. **Follow the Zfast_div_eucl_spec example** in Zaux.lean and other theorems in current file as your template.
2. **ONE-BY-ONE approach is mandatory:**
    - Write ONE theorem
    - Use the hoare triple syntax (introduced in FloatSpec/PIPELINE.md and CLAUDE.md) to write the theorem
    - Check immediately with mcp tool or `lake build`
    - Fix any errors before proceeding to next theorem
    - Never batch multiple theorems without checking
3. After writing each theorem, check whether they are aligned with the Coq implementation. If so, mark them as complete in the record file.
4. After completing the theorem, check whether the file is complete by running `lake build` and `mcp` to make sure there are no errors or 'pure true' statements. Then move on to the next theorem.
5. After you think the entire core is aligned with Coq, run a subagent using the following prompt: "Compare the theorems in /home/hantao/code/FloatSpec/FloatSpec/src/Core and /home/hantao/code/flocq/src/Core: List all the theorems in Lean version and Coq version separately, check file by file (most file names are aligned, only Generic_fmt.v corresponds to Generic_fmt.lean and Round_generic.lean) whether each theorem in Coq has it's correspondence in Lean. Create a new markdown file and takedown all your comparations. Note that sometimes the theorem name in Lean might not be the same with that in coq, and you need to judge by its content instead of their names. NO examples when you are listing functions, and copy the style of organization of existing /home/hantao/code/FloatSpec/FloatSpec/src/Core/Core_Theorems_Comparison_Auto.md." Then check the new record file to see if there are any missing theorems.
6. Repeat the above process until all theorems are imported and the file compiles cleanly.

### Before Writing Each Theorem

1. **Verify function implementation** - ensure the function body is correct
2. **Preserve syntax** - do NOT change hoare triple syntax unless absolutely necessary
    - Think multiple times before modifying specs or code body
    - If changes are needed, decompose complex specs rather than rewriting

### Compilation Verification

- **After EVERY theorem:** Run `mcp` (preferred) or `lake build xxx`
- **Definition of complete:** NO errors or 'pure true' statements (functions should be implemented already, but proofs can be sorry placeholders)
- **Never mark as complete if:**
    - Any errors or 'pure true' statements remain
    - Compilation returns errors
    - Sorry is allowed, but only as a placeholder for the proof


### Important Notes

- Use MCP tool instead of bash command to get diagnostic messages!
- Skip already-imported theorems!! There might be warnings but just leave them there!
- You can use exisiting (and proved) theorem to assist your spec writing. If a theorem is necessary but not introduced, you can turn to work on that first. The useful theorems might not be in the same file, but in the import list
- When you are trying to use a certain lemma, check through mcp tools (or https://github.com/leanprover-community/mathlib4) to make sure the lemma exists. Else, write your own implementation of the lemma.
- Your target is to import all the missing theorems in the file, so be careful not to miss any.
- If the function given in some theorem is not implemented, you need to migrate that function from Coq to Lean.

### Success Criteria

✅ All error and 'pure true' statements eliminated
✅ Clean compilation for entire file
✅ Each theorem verified individually before moving on
EOF

# msg="${msg//__FILE_PLACEHOLDER__/$file}"

log_name=/home/hantao/code/FloatSpec/.log/codex_log/import_missing_theorems_final_clean_round_${i}.log
# Build the CLI command as an array to preserve spaces/newlines
codex --model gpt-5 high exec "$msg" --dangerously-bypass-approvals-and-sandbox | tee "$log_name"

# done
done